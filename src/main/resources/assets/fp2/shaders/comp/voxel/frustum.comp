/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-$today.year DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//
//
// BUFFERS
//
//

//Commands

struct DrawCommand {
    int x; //written out to avoid padding
    int y;
    int z;
    int level;

    int count;
    int instanceCount;
    int firstIndex;
    int baseVertex;
    int baseInstance;

    int padding[3];
};

layout(std430, binding = 3) buffer COMMANDS {
    DrawCommand commands[];
};

//
//
// CODE
//
//

void process(inout DrawCommand cmd) {
    ivec3 position_absolute = ivec3(cmd.x, cmd.y, cmd.z) << (T_SHIFT + cmd.level);
    ivec3 position_relative = position_absolute - glState.camera.position_floor;

    cmd.instanceCount = int(isBoxInFrustum(
            vec3(position_relative) - glState.camera.position_fract,
            vec3(position_relative + vec3(T_VOXELS << cmd.level)) - glState.camera.position_fract));
}

void main() {
    process(commands[gl_WorkGroupID.x]);
}
